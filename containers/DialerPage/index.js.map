{"version":3,"sources":["containers/DialerPage/index.js"],"names":["mapToProps","_","phone","call","dialerUI","callingSettings","contactSearch","connectivityMonitor","locale","rateLimiter","webphone","audioSettings","conferenceCall","dialButtonMuted","isWebphoneMode","callingMode","callingModes","waitingWebphoneConnected","connecting","webphoneDisconnected","connected","audioNotEnabled","userMedia","conferenceCallEquipped","withTab","sessions","length","currentLocale","callButtonDisabled","isIdle","connectivity","throttling","toNumber","toNumberField","recipient","searchContactList","sortedResult","fromNumbers","fromNumber","showSpinner","ready","dialButtonVolume","callBtnClassName","styles","callBtn","mapToFunctions","regionSettings","phoneTypeRenderer","recipientsContactInfoRenderer","recipientsContactPhoneRenderer","onToNumberChange","setToNumberField","value","clearToNumber","clearToNumberField","onCallButtonClick","changeFromNumber","updateFromNumber","formatPhone","phoneNumber","areaCode","countryCode","setRecipient","clearRecipient","searchContact","searchString","debouncedSearch","DialerPage","DialerPanel","default"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\n\nimport DialerPanel from '../../components/DialerPanel';\nimport withPhone from '../../lib/withPhone';\nimport styles from './styles.scss';\n\nfunction mapToProps(_, {\n  phone: {\n    call,\n    dialerUI,\n    callingSettings,\n    contactSearch,\n    connectivityMonitor,\n    locale,\n    rateLimiter,\n    webphone,\n    audioSettings,\n    conferenceCall,\n  },\n  dialButtonMuted = false,\n}) {\n  const isWebphoneMode = (callingSettings.callingMode === callingModes.webphone);\n  const waitingWebphoneConnected = (isWebphoneMode && webphone && webphone.connecting);\n  const webphoneDisconnected = (isWebphoneMode && webphone && !webphone.connected);\n  const audioNotEnabled = isWebphoneMode && audioSettings && !audioSettings.userMedia;\n  const conferenceCallEquipped = !!conferenceCall;\n  const withTab = !!(conferenceCallEquipped && isWebphoneMode && webphone.sessions.length);\n\n  return {\n    currentLocale: locale.currentLocale,\n    callingMode: callingSettings.callingMode,\n    isWebphoneMode,\n    callButtonDisabled: (\n      !call.isIdle\n      || !connectivityMonitor.connectivity\n      || rateLimiter.throttling\n      || webphoneDisconnected\n      || audioNotEnabled\n    ),\n    toNumber: dialerUI.toNumberField,\n    recipient: dialerUI.recipient,\n    searchContactList: contactSearch ? contactSearch.sortedResult : [],\n    fromNumbers: callingSettings.fromNumbers,\n    fromNumber: callingSettings.fromNumber,\n    showSpinner: !(\n      call.ready &&\n      callingSettings.ready &&\n      locale.ready &&\n      connectivityMonitor.ready &&\n      (!audioSettings || audioSettings.ready) &&\n      (!isWebphoneMode || !webphone || !waitingWebphoneConnected)\n    ),\n    dialButtonVolume: audioSettings ? audioSettings.dialButtonVolume : 1,\n    // If audioSettings is used, then use values from audioSettings module\n    dialButtonMuted: audioSettings ? audioSettings.dialButtonMuted : dialButtonMuted,\n    callBtnClassName: withTab ? null : styles.callBtn,\n  };\n}\nfunction mapToFunctions(_, {\n  phone: {\n    callingSettings,\n    regionSettings,\n    contactSearch,\n    dialerUI,\n  },\n  phoneTypeRenderer,\n  recipientsContactInfoRenderer,\n  recipientsContactPhoneRenderer,\n}) {\n  return {\n    onToNumberChange: value => (\n      dialerUI.setToNumberField(value)\n    ),\n    clearToNumber: () => dialerUI.clearToNumberField(),\n    onCallButtonClick() {\n      dialerUI.onCallButtonClick();\n    },\n    changeFromNumber: (...args) => callingSettings.updateFromNumber(...args),\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings && regionSettings.areaCode,\n      countryCode: regionSettings && regionSettings.countryCode,\n    }),\n    setRecipient: recipient => dialerUI.setRecipient(recipient),\n    clearRecipient: () => dialerUI.clearRecipient(),\n    searchContact(searchString) {\n      if (!contactSearch) {\n        return;\n      }\n      contactSearch.debouncedSearch({ searchString });\n    },\n    phoneTypeRenderer,\n    recipientsContactInfoRenderer,\n    recipientsContactPhoneRenderer,\n  };\n}\n\nconst DialerPage = withPhone(connect(\n  mapToProps,\n  mapToFunctions,\n)(DialerPanel));\n\nexport {\n  mapToFunctions,\n  mapToProps,\n  DialerPage as default,\n};\n"]}